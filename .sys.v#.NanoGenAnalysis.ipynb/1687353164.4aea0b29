{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "buried-illinois",
   "metadata": {},
   "source": [
    "# Generator level analysis from NanoAOD\n",
    "\n",
    "This notebook performs a generator level selection of 3 lepton + 4 jet event candidates which can be used for the search for double parton scattering production of $t\\bar{t}+J/\\Psi$.\n",
    "It is assumed that the $t\\bar{t}$ decays in a $(Wb)(Wb)\\rightarrow (\\ell\\nu b)(jj'b)$ final state and that the $J/\\Psi$ decays in a $\\ell\\ell$ final state.\n",
    "\n",
    "The events are skimmed by requiring either a trigger lepton (from the W decay) or two leptons with an invariant mass compatible with a $J/\\Psi$ decay."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0bd0f303",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/00\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "sudden-accreditation",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min, sys: 433 ms, total: 1min 1s\n",
      "Wall time: 18 s\n",
      "first     : pass=23391      all=23686      -- eff=98.75 % cumulative eff=98.75 %\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <RTaskArenaWrapper>: CPU Bandwith Control Active. Proceeding with 4 threads accordingly\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "def runSelectionOn(infile='/eos/cms/store/cmst3/group/top/ttbarjpsi/ggpsi1g/ggpsi1g_NANOGEN.root',\n",
    "                   outfile='genlevel.root'):\n",
    "    \n",
    "    \"\"\"\n",
    "    runs a simple selection on a NanoGEN file and saves a snapshot of the event\n",
    "    the selection makes use of RDataFrames and additional functions coded in selection_helpers.h\n",
    "    \"\"\"\n",
    "\n",
    "    ROOT.gInterpreter.Declare('#include \"selection_helpers.h\"')\n",
    "    \n",
    "    #enable to compute with multiple cores simultaneously\n",
    "    ROOT.ROOT.EnableImplicitMT()\n",
    "    rdf = ROOT.RDataFrame('Events',infile)\n",
    "\n",
    "    #lepton selection: select in the kinematics region of interest\n",
    "    rdf = rdf.Define('genlep', 'GenPart_status==1 && GenPart_pt>1 && abs(GenPart_eta)<2.4 && (abs(GenPart_pdgId)==11 || abs(GenPart_pdgId)==13)') \\\n",
    "             .Define('n_genlep', 'Sum(genlep)') \\\n",
    "             .Filter('n_genlep>0')\n",
    "#     rdf.Report().Print()\n",
    "#     print('rdf')\n",
    "    for c in ['pdgId','pt','eta','phi']:\n",
    "        rdf = rdf.Define(f'GenLep_{c}',f'GenPart_{c}[genlep]')\n",
    "\n",
    "    #count trigger lepton candidates (high pT)\n",
    "    rdf = rdf.Define('gentriglep','GenLep_pt>5') \\\n",
    "             .Define('n_gentriglep', 'Sum(gentriglep)')\n",
    "        \n",
    "    #count dileptons in the J/Psi and Z mass regions\n",
    "    rdf = rdf.Define('genjpsicands', ' dileptonCands(GenLep_pdgId,GenLep_pt,GenLep_eta,GenLep_phi,3.096,1.2)') \\\n",
    "             .Define('n_genjpsicands', 'Sum(genjpsicands)') \\\n",
    "             .Define('genzcands', 'dileptonCands(GenLep_pdgId[gentriglep],GenLep_pt[gentriglep],GenLep_eta[gentriglep],GenLep_phi[gentriglep],91.,15.)') \\\n",
    "             .Define('n_genzcands', 'Sum(genzcands)')\n",
    "   \n",
    "    #filter: 1 trigger or 1 J/Psi lepton but no Z candidate\n",
    "    rdf = rdf.Filter('(n_gentriglep>0 || n_genjpsicands>0) && n_genzcands==0')\n",
    "    \n",
    "    #save information on trigger lepton\n",
    "    rdf = rdf.Define('TrigLepton_pdgId','n_gentriglep>0 ? GenLep_pdgId[gentriglep][0] : 0') \\\n",
    "             .Define('TrigLepton_pt',   'n_gentriglep>0 ? GenLep_pt[gentriglep][0]: 0') \\\n",
    "             .Define('TrigLepton_eta',  'n_gentriglep>0 ? GenLep_eta[gentriglep][0]: 0') \\\n",
    "             .Define('TrigLepton_phi',  'n_gentriglep>0 ? GenLep_phi[gentriglep][0]: 0')\n",
    "    \n",
    "    #save information on J/Psi leptons\n",
    "    for i in range(2):\n",
    "        rdf = rdf.Define(f'JPsiLepton_{i+1}_pdgId',f'n_genjpsicands>0 ? GenLep_pdgId[genjpsicands][{i}] : 0') \\\n",
    "                 .Define(f'JPsiLepton_{i+1}_pt',   f'n_genjpsicands>0 ? GenLep_pt[genjpsicands][{i}] : 0') \\\n",
    "                 .Define(f'JPsiLepton_{i+1}_eta',  f'n_genjpsicands>0 ? GenLep_eta[genjpsicands][{i}] : 0') \\\n",
    "                 .Define(f'JPsiLepton_{i+1}_phi',  f'n_genjpsicands>0 ? GenLep_phi[genjpsicands][{i}] : 0')\n",
    "\n",
    "    #save kinematics of the J/Psi    \n",
    "    rdf = rdf.Define('JPsi_mass','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"mass\") : 0') \\\n",
    "             .Define('JPsi_pt','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"pt\") : 0') \\\n",
    "             .Define('JPsi_eta','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"eta\") : 0') \\\n",
    "             .Define('JPsi_phi','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"phi\") : 0')\n",
    "            \n",
    "    #jet selection\n",
    "    rdf = rdf.Define('genjet', 'GenJet_pt>30 && abs(GenJet_eta)<2.4 && crossClean(GenJet_eta,GenJet_phi,GenLep_eta[gentriglep],GenLep_phi[gentriglep])') \\\n",
    "             .Define('n_genjet', 'Sum(genjet)')\n",
    "    \n",
    "    #save the selection\n",
    "    columns=['n_genlep','n_gentriglep','n_genjpsicands']\n",
    "#     columns+=['GenLep_pdgId']\n",
    "    columns+=['TrigLepton_pdgId','TrigLepton_pt','TrigLepton_eta','TrigLepton_phi']\n",
    "    for i in range(1,3):\n",
    "        columns+=[f'JPsiLepton_{i}_pdgId',f'JPsiLepton_{i}_pt',f'JPsiLepton_{i}_eta',f'JPsiLepton_{i}_phi']\n",
    "    columns+=['JPsi_pt','JPsi_eta','JPsi_phi','JPsi_mass']\n",
    "    rdf.Snapshot('Events',outfile,columns)\n",
    "    ROOT.ROOT.DisableImplicitMT()\n",
    "\n",
    "runSelectionOn()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c6d6027",
   "metadata": {},
   "source": [
    "We open the snapshot as a pandas DataFrame to inspect it's contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc520d5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "infile='/eos/cms/store/cmst3/group/top/ttbarjpsi/ggpsi1g/ggpsi1g_NANOGEN.root'\n",
    "outfile='genlevel.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a837c866",
   "metadata": {},
   "outputs": [],
   "source": [
    "ROOT.gInterpreter.Declare('#include \"selection_helpers.h\"')\n",
    "    \n",
    "ROOT.ROOT.EnableImplicitMT()\n",
    "rdf = ROOT.RDataFrame('Events',infile)\n",
    "\n",
    "#lepton selection: select in the kinematics region of interest\n",
    "rdf = rdf.Define('genlep', 'GenPart_status==1 && GenPart_pt>1 && abs(GenPart_eta)<2.4 && (abs(GenPart_pdgId)==11 || abs(GenPart_pdgId)==13)') \\\n",
    "         .Define('n_genlep', 'Sum(genlep)') \\\n",
    "         .Filter('n_genlep>0' , 'first cuts: only generated leptons = True')\n",
    "\n",
    "# report the results of cut application:\n",
    "rdf.Report()\n",
    "\n",
    "\n",
    "\n",
    "# # Convert RDF to pandas DataFrame\n",
    "# df = rdf.AsNumpy()\n",
    "\n",
    "\n",
    "# # Print the DataFrame\n",
    "# print(df)\n",
    "\n",
    "\n",
    "for c in ['pdgId','pt','eta','phi']:\n",
    "    rdf = rdf.Define(f'GenLep_{c}',f'GenPart_{c}[genlep]')\n",
    "\n",
    "#count trigger lepton candidates (high pT)\n",
    "rdf = rdf.Define('gentriglep','GenLep_pt>5') \\\n",
    "         .Define('n_gentriglep', 'Sum(gentriglep)')\n",
    "\n",
    "#count dileptons in the J/Psi and Z mass regions\n",
    "rdf = rdf.Define('genjpsicands', ' dileptonCands(GenLep_pdgId,GenLep_pt,GenLep_eta,GenLep_phi,3.096,1.2)') \\\n",
    "         .Define('n_genjpsicands', 'Sum(genjpsicands)') \\\n",
    "         .Define('genzcands', 'dileptonCands(GenLep_pdgId[gentriglep],GenLep_pt[gentriglep],GenLep_eta[gentriglep],GenLep_phi[gentriglep],91.,15.)') \\\n",
    "         .Define('n_genzcands', 'Sum(genzcands)')\n",
    "\n",
    "#filter: 1 trigger or 1 J/Psi lepton but no Z candidate\n",
    "rdf = rdf.Filter('(n_gentriglep>0 || n_genjpsicands>0) && n_genzcands==0')\n",
    "\n",
    "#save information on trigger lepton\n",
    "rdf = rdf.Define('TrigLepton_pdgId','n_gentriglep>0 ? GenLep_pdgId[gentriglep][0] : 0') \\\n",
    "         .Define('TrigLepton_pt',   'n_gentriglep>0 ? GenLep_pt[gentriglep][0]: 0') \\\n",
    "         .Define('TrigLepton_eta',  'n_gentriglep>0 ? GenLep_eta[gentriglep][0]: 0') \\\n",
    "         .Define('TrigLepton_phi',  'n_gentriglep>0 ? GenLep_phi[gentriglep][0]: 0')\n",
    "\n",
    "#save information on J/Psi leptons\n",
    "for i in range(2):\n",
    "    rdf = rdf.Define(f'JPsiLepton_{i+1}_pdgId',f'n_genjpsicands>0 ? GenLep_pdgId[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_pt',   f'n_genjpsicands>0 ? GenLep_pt[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_eta',  f'n_genjpsicands>0 ? GenLep_eta[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_phi',  f'n_genjpsicands>0 ? GenLep_phi[genjpsicands][{i}] : 0')\n",
    "\n",
    "#save kinematics of the J/Psi    \n",
    "rdf = rdf.Define('JPsi_mass','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"mass\") : 0') \\\n",
    "         .Define('JPsi_pt','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"pt\") : 0') \\\n",
    "         .Define('JPsi_eta','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"eta\") : 0') \\\n",
    "         .Define('JPsi_phi','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"phi\") : 0')\\\n",
    "\n",
    "\n",
    "## report the cuts:\n",
    "# rdf.Report().Print()\n",
    "\n",
    "\n",
    "#jet selection\n",
    "rdf = rdf.Define('genjet', 'GenJet_pt>30 && abs(GenJet_eta)<2.4 && crossClean(GenJet_eta,GenJet_phi,GenLep_eta[gentriglep],GenLep_phi[gentriglep])') \\\n",
    "         .Define('n_genjet', 'Sum(genjet)')\n",
    "\n",
    "#save the selection\n",
    "columns=['n_genlep','n_gentriglep','n_genjpsicands']\n",
    "#     columns+=['GenLep_pdgId']\n",
    "columns+=['TrigLepton_pdgId','TrigLepton_pt','TrigLepton_eta','TrigLepton_phi']\n",
    "for i in range(1,3):\n",
    "    columns+=[f'JPsiLepton_{i}_pdgId',f'JPsiLepton_{i}_pt',f'JPsiLepton_{i}_eta',f'JPsiLepton_{i}_phi']\n",
    "columns+=['JPsi_pt','JPsi_eta','JPsi_phi','JPsi_mass']\n",
    "rdf.Snapshot('Events',outfile,columns)\n",
    "rdf.Report().Print()\n",
    "\n",
    "ROOT.ROOT.DisableImplicitMT()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5671c519",
   "metadata": {},
   "source": [
    "### branches in my nanoAOD file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "315f2005",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "genlep\n",
      "n_genlep\n",
      "GenLep_pdgId\n",
      "GenLep_pt\n",
      "GenLep_eta\n",
      "GenLep_phi\n",
      "gentriglep\n",
      "n_gentriglep\n",
      "genjpsicands\n",
      "n_genjpsicands\n",
      "genzcands\n",
      "n_genzcands\n",
      "TrigLepton_pdgId\n",
      "TrigLepton_pt\n",
      "TrigLepton_eta\n",
      "TrigLepton_phi\n",
      "JPsiLepton_1_pdgId\n",
      "JPsiLepton_1_pt\n",
      "JPsiLepton_1_eta\n",
      "JPsiLepton_1_phi\n",
      "JPsiLepton_2_pdgId\n",
      "JPsiLepton_2_pt\n",
      "JPsiLepton_2_eta\n",
      "JPsiLepton_2_phi\n",
      "JPsi_mass\n",
      "JPsi_pt\n",
      "JPsi_eta\n",
      "JPsi_phi\n",
      "genjet\n",
      "n_genjet\n",
      "run\n",
      "luminosityBlock\n",
      "event\n",
      "bunchCrossing\n",
      "HTXS_njets25\n",
      "HTXS_njets30\n",
      "HTXS_stage1_1_cat_pTjet25GeV\n",
      "HTXS_stage1_1_cat_pTjet30GeV\n",
      "HTXS_stage1_1_fine_cat_pTjet25GeV\n",
      "HTXS_stage1_1_fine_cat_pTjet30GeV\n",
      "HTXS_stage1_2_cat_pTjet25GeV\n",
      "HTXS_stage1_2_cat_pTjet30GeV\n",
      "HTXS_stage1_2_fine_cat_pTjet25GeV\n",
      "HTXS_stage1_2_fine_cat_pTjet30GeV\n",
      "HTXS_stage_0\n",
      "HTXS_stage_1_pTjet25\n",
      "HTXS_stage_1_pTjet30\n",
      "HTXS_Higgs_pt\n",
      "HTXS_Higgs_y\n",
      "nGenJetAK8\n",
      "GenJetAK8_eta\n",
      "GenJetAK8_mass\n",
      "GenJetAK8_phi\n",
      "GenJetAK8_pt\n",
      "nGenJet\n",
      "GenJet_eta\n",
      "GenJet_mass\n",
      "GenJet_phi\n",
      "GenJet_pt\n",
      "nGenPart\n",
      "GenPart_genPartIdxMother\n",
      "GenPart_statusFlags\n",
      "GenPart_pdgId\n",
      "GenPart_status\n",
      "GenPart_eta\n",
      "GenPart_mass\n",
      "GenPart_phi\n",
      "GenPart_pt\n",
      "Generator_id1\n",
      "Generator_id2\n",
      "Generator_binvar\n",
      "Generator_scalePDF\n",
      "Generator_weight\n",
      "Generator_x1\n",
      "Generator_x2\n",
      "Generator_xpdf1\n",
      "Generator_xpdf2\n",
      "GenVtx_x\n",
      "GenVtx_y\n",
      "GenVtx_z\n",
      "nGenVisTau\n",
      "GenVisTau_status\n",
      "GenVisTau_charge\n",
      "GenVisTau_genPartIdxMother\n",
      "GenVisTau_eta\n",
      "GenVisTau_mass\n",
      "GenVisTau_phi\n",
      "GenVisTau_pt\n",
      "genWeight\n",
      "LHEWeight_originalXWGTUP\n",
      "nLHEPdfWeight\n",
      "LHEPdfWeight\n",
      "nLHEReweightingWeight\n",
      "LHEReweightingWeight\n",
      "nLHEScaleWeight\n",
      "LHEScaleWeight\n",
      "nPSWeight\n",
      "PSWeight\n",
      "LHE_Njets\n",
      "LHE_Nb\n",
      "LHE_Nc\n",
      "LHE_Nuds\n",
      "LHE_Nglu\n",
      "LHE_NpNLO\n",
      "LHE_NpLO\n",
      "LHE_HT\n",
      "LHE_HTIncoming\n",
      "LHE_Vpt\n",
      "LHE_AlphaS\n",
      "nLHEPart\n",
      "LHEPart_pdgId\n",
      "LHEPart_status\n",
      "LHEPart_spin\n",
      "LHEPart_pt\n",
      "LHEPart_eta\n",
      "LHEPart_phi\n",
      "LHEPart_mass\n",
      "LHEPart_incomingpz\n",
      "GenMET_phi\n",
      "GenMET_pt\n",
      "nGenDressedLepton\n",
      "GenDressedLepton_hasTauAnc\n",
      "GenDressedLepton_pdgId\n",
      "GenDressedLepton_eta\n",
      "GenDressedLepton_mass\n",
      "GenDressedLepton_phi\n",
      "GenDressedLepton_pt\n",
      "MET_fiducialGenPhi\n",
      "MET_fiducialGenPt\n",
      "nGenIsolatedPhoton\n",
      "GenIsolatedPhoton_eta\n",
      "GenIsolatedPhoton_mass\n",
      "GenIsolatedPhoton_phi\n",
      "GenIsolatedPhoton_pt\n",
      "GenJetAK8_hadronFlavour\n",
      "GenJetAK8_partonFlavour\n",
      "GenJet_hadronFlavour\n",
      "GenJet_partonFlavour\n",
      "GenVtx_t0\n"
     ]
    }
   ],
   "source": [
    "# Get the list of column names\n",
    "column_names = rdf.GetColumnNames()\n",
    "\n",
    "# Print the names of all columns\n",
    "for column in column_names:\n",
    "    print(column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46cd397c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8baf2e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57aa1af3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d5f84106",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Read 17203 events. Columns available are=['n_genlep', 'n_gentriglep', 'n_genjpsicands', 'TrigLepton_pdgId', 'TrigLepton_pt', 'TrigLepton_eta', 'TrigLepton_phi', 'JPsiLepton_1_pdgId', 'JPsiLepton_1_pt', 'JPsiLepton_1_eta', 'JPsiLepton_1_phi', 'JPsiLepton_2_pdgId', 'JPsiLepton_2_pt', 'JPsiLepton_2_eta', 'JPsiLepton_2_phi', 'JPsi_pt', 'JPsi_eta', 'JPsi_phi', 'JPsi_mass']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_genlep</th>\n",
       "      <th>n_gentriglep</th>\n",
       "      <th>TrigLepton_pdgId</th>\n",
       "      <th>TrigLepton_pt</th>\n",
       "      <th>TrigLepton_eta</th>\n",
       "      <th>TrigLepton_phi</th>\n",
       "      <th>JPsiLepton_1_pdgId</th>\n",
       "      <th>JPsiLepton_1_pt</th>\n",
       "      <th>JPsiLepton_1_eta</th>\n",
       "      <th>JPsiLepton_1_phi</th>\n",
       "      <th>JPsiLepton_2_pdgId</th>\n",
       "      <th>JPsiLepton_2_pt</th>\n",
       "      <th>JPsiLepton_2_eta</th>\n",
       "      <th>JPsiLepton_2_phi</th>\n",
       "      <th>JPsi_pt</th>\n",
       "      <th>JPsi_eta</th>\n",
       "      <th>JPsi_phi</th>\n",
       "      <th>JPsi_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "      <td>17203.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.008836</td>\n",
       "      <td>0.838865</td>\n",
       "      <td>-1.238679</td>\n",
       "      <td>4.767535</td>\n",
       "      <td>0.073897</td>\n",
       "      <td>0.016101</td>\n",
       "      <td>-3.290356</td>\n",
       "      <td>1.284107</td>\n",
       "      <td>0.026427</td>\n",
       "      <td>0.000518</td>\n",
       "      <td>3.290356</td>\n",
       "      <td>1.302679</td>\n",
       "      <td>0.029913</td>\n",
       "      <td>0.003709</td>\n",
       "      <td>1.129930</td>\n",
       "      <td>1.129930</td>\n",
       "      <td>1.129930</td>\n",
       "      <td>1.129930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.260201</td>\n",
       "      <td>0.631836</td>\n",
       "      <td>10.859660</td>\n",
       "      <td>3.423042</td>\n",
       "      <td>1.086171</td>\n",
       "      <td>1.523471</td>\n",
       "      <td>7.171989</td>\n",
       "      <td>1.810259</td>\n",
       "      <td>0.754010</td>\n",
       "      <td>1.074331</td>\n",
       "      <td>7.171989</td>\n",
       "      <td>1.839365</td>\n",
       "      <td>0.759276</td>\n",
       "      <td>1.070504</td>\n",
       "      <td>1.486654</td>\n",
       "      <td>1.486654</td>\n",
       "      <td>1.486654</td>\n",
       "      <td>1.486654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.399902</td>\n",
       "      <td>-3.141113</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.395996</td>\n",
       "      <td>-3.141113</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.397949</td>\n",
       "      <td>-3.140137</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.561157</td>\n",
       "      <td>-0.869385</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.610919</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>6.787630</td>\n",
       "      <td>0.783752</td>\n",
       "      <td>0.971375</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.884574</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>2.911267</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.099651</td>\n",
       "      <td>3.099651</td>\n",
       "      <td>3.099651</td>\n",
       "      <td>3.099651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>28.575230</td>\n",
       "      <td>2.399414</td>\n",
       "      <td>3.140137</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>8.796116</td>\n",
       "      <td>2.399902</td>\n",
       "      <td>3.141113</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>12.461478</td>\n",
       "      <td>2.398926</td>\n",
       "      <td>3.141113</td>\n",
       "      <td>9.552274</td>\n",
       "      <td>9.552274</td>\n",
       "      <td>9.552274</td>\n",
       "      <td>9.552274</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           n_genlep  n_gentriglep  TrigLepton_pdgId  TrigLepton_pt  \\\n",
       "count  17203.000000  17203.000000      17203.000000   17203.000000   \n",
       "mean       2.008836      0.838865         -1.238679       4.767535   \n",
       "std        0.260201      0.631836         10.859660       3.423042   \n",
       "min        1.000000      0.000000        -13.000000       0.000000   \n",
       "25%        2.000000      0.000000        -13.000000       0.000000   \n",
       "50%        2.000000      1.000000          0.000000       5.610919   \n",
       "75%        2.000000      1.000000         13.000000       6.787630   \n",
       "max        5.000000      3.000000         13.000000      28.575230   \n",
       "\n",
       "       TrigLepton_eta  TrigLepton_phi  JPsiLepton_1_pdgId  JPsiLepton_1_pt  \\\n",
       "count    17203.000000    17203.000000        17203.000000     17203.000000   \n",
       "mean         0.073897        0.016101           -3.290356         1.284107   \n",
       "std          1.086171        1.523471            7.171989         1.810259   \n",
       "min         -2.399902       -3.141113          -13.000000         0.000000   \n",
       "25%         -0.561157       -0.869385          -13.000000         0.000000   \n",
       "50%          0.000000        0.000000            0.000000         0.000000   \n",
       "75%          0.783752        0.971375            0.000000         2.884574   \n",
       "max          2.399414        3.140137           13.000000         8.796116   \n",
       "\n",
       "       JPsiLepton_1_eta  JPsiLepton_1_phi  JPsiLepton_2_pdgId  \\\n",
       "count      17203.000000      17203.000000        17203.000000   \n",
       "mean           0.026427          0.000518            3.290356   \n",
       "std            0.754010          1.074331            7.171989   \n",
       "min           -2.395996         -3.141113          -13.000000   \n",
       "25%            0.000000          0.000000            0.000000   \n",
       "50%            0.000000          0.000000            0.000000   \n",
       "75%            0.000000          0.000000           13.000000   \n",
       "max            2.399902          3.141113           13.000000   \n",
       "\n",
       "       JPsiLepton_2_pt  JPsiLepton_2_eta  JPsiLepton_2_phi       JPsi_pt  \\\n",
       "count     17203.000000      17203.000000      17203.000000  17203.000000   \n",
       "mean          1.302679          0.029913          0.003709      1.129930   \n",
       "std           1.839365          0.759276          1.070504      1.486654   \n",
       "min           0.000000         -2.397949         -3.140137      0.000000   \n",
       "25%           0.000000          0.000000          0.000000      0.000000   \n",
       "50%           0.000000          0.000000          0.000000      0.000000   \n",
       "75%           2.911267          0.000000          0.000000      3.099651   \n",
       "max          12.461478          2.398926          3.141113      9.552274   \n",
       "\n",
       "           JPsi_eta      JPsi_phi     JPsi_mass  \n",
       "count  17203.000000  17203.000000  17203.000000  \n",
       "mean       1.129930      1.129930      1.129930  \n",
       "std        1.486654      1.486654      1.486654  \n",
       "min        0.000000      0.000000      0.000000  \n",
       "25%        0.000000      0.000000      0.000000  \n",
       "50%        0.000000      0.000000      0.000000  \n",
       "75%        3.099651      3.099651      3.099651  \n",
       "max        9.552274      9.552274      9.552274  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#open as a pandas dataframe\n",
    "rdf=ROOT.RDataFrame('Events','genlevel.root')\n",
    "rdf.Report.Prin()\n",
    "df=pd.DataFrame(rdf.AsNumpy())\n",
    "print(f'Read {df.shape[0]} events. Columns available are={list(df.columns)}')\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9f582d05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_genlep</th>\n",
       "      <th>n_gentriglep</th>\n",
       "      <th>n_genjpsicands</th>\n",
       "      <th>TrigLepton_pdgId</th>\n",
       "      <th>TrigLepton_pt</th>\n",
       "      <th>TrigLepton_eta</th>\n",
       "      <th>TrigLepton_phi</th>\n",
       "      <th>JPsiLepton_1_pdgId</th>\n",
       "      <th>JPsiLepton_1_pt</th>\n",
       "      <th>JPsiLepton_1_eta</th>\n",
       "      <th>JPsiLepton_1_phi</th>\n",
       "      <th>JPsiLepton_2_pdgId</th>\n",
       "      <th>JPsiLepton_2_pt</th>\n",
       "      <th>JPsiLepton_2_eta</th>\n",
       "      <th>JPsiLepton_2_phi</th>\n",
       "      <th>JPsi_pt</th>\n",
       "      <th>JPsi_eta</th>\n",
       "      <th>JPsi_phi</th>\n",
       "      <th>JPsi_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>-13</td>\n",
       "      <td>5.519522</td>\n",
       "      <td>-1.598145</td>\n",
       "      <td>-1.058838</td>\n",
       "      <td>-13</td>\n",
       "      <td>5.519522</td>\n",
       "      <td>-1.598145</td>\n",
       "      <td>-1.058838</td>\n",
       "      <td>13</td>\n",
       "      <td>3.038785</td>\n",
       "      <td>-1.328613</td>\n",
       "      <td>-0.338562</td>\n",
       "      <td>3.100114</td>\n",
       "      <td>3.100114</td>\n",
       "      <td>3.100114</td>\n",
       "      <td>3.100114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-13</td>\n",
       "      <td>3.074169</td>\n",
       "      <td>-0.248352</td>\n",
       "      <td>-0.634644</td>\n",
       "      <td>13</td>\n",
       "      <td>4.127180</td>\n",
       "      <td>-0.565430</td>\n",
       "      <td>-1.466064</td>\n",
       "      <td>3.099948</td>\n",
       "      <td>3.099948</td>\n",
       "      <td>3.099948</td>\n",
       "      <td>3.099948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-13</td>\n",
       "      <td>2.796811</td>\n",
       "      <td>1.892578</td>\n",
       "      <td>0.826538</td>\n",
       "      <td>13</td>\n",
       "      <td>4.715885</td>\n",
       "      <td>1.081543</td>\n",
       "      <td>1.000977</td>\n",
       "      <td>3.099559</td>\n",
       "      <td>3.099559</td>\n",
       "      <td>3.099559</td>\n",
       "      <td>3.099559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-13</td>\n",
       "      <td>3.472961</td>\n",
       "      <td>-0.940796</td>\n",
       "      <td>2.542480</td>\n",
       "      <td>13</td>\n",
       "      <td>2.102580</td>\n",
       "      <td>-0.071518</td>\n",
       "      <td>1.816650</td>\n",
       "      <td>3.099885</td>\n",
       "      <td>3.099885</td>\n",
       "      <td>3.099885</td>\n",
       "      <td>3.099885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>5.022191</td>\n",
       "      <td>-0.997070</td>\n",
       "      <td>-2.331543</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17198</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>11.996845</td>\n",
       "      <td>2.148438</td>\n",
       "      <td>-3.114746</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17199</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>-13</td>\n",
       "      <td>7.217966</td>\n",
       "      <td>1.132324</td>\n",
       "      <td>-1.164551</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17200</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>13</td>\n",
       "      <td>7.389923</td>\n",
       "      <td>0.979004</td>\n",
       "      <td>-0.215485</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17201</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13</td>\n",
       "      <td>2.643000</td>\n",
       "      <td>-1.353516</td>\n",
       "      <td>-0.729248</td>\n",
       "      <td>-13</td>\n",
       "      <td>2.963679</td>\n",
       "      <td>-0.396301</td>\n",
       "      <td>-1.215088</td>\n",
       "      <td>3.098841</td>\n",
       "      <td>3.098841</td>\n",
       "      <td>3.098841</td>\n",
       "      <td>3.098841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17202</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>-13</td>\n",
       "      <td>5.030485</td>\n",
       "      <td>0.357971</td>\n",
       "      <td>-2.687500</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17203 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       n_genlep  n_gentriglep n_genjpsicands  TrigLepton_pdgId  TrigLepton_pt  \\\n",
       "0             2             1           True               -13       5.519522   \n",
       "1             2             0           True                 0       0.000000   \n",
       "2             2             0           True                 0       0.000000   \n",
       "3             2             0           True                 0       0.000000   \n",
       "4             2             1          False                13       5.022191   \n",
       "...         ...           ...            ...               ...            ...   \n",
       "17198         1             1          False                13      11.996845   \n",
       "17199         2             1          False               -13       7.217966   \n",
       "17200         2             1          False                13       7.389923   \n",
       "17201         2             0           True                 0       0.000000   \n",
       "17202         2             2          False               -13       5.030485   \n",
       "\n",
       "       TrigLepton_eta  TrigLepton_phi  JPsiLepton_1_pdgId  JPsiLepton_1_pt  \\\n",
       "0           -1.598145       -1.058838                 -13         5.519522   \n",
       "1            0.000000        0.000000                 -13         3.074169   \n",
       "2            0.000000        0.000000                 -13         2.796811   \n",
       "3            0.000000        0.000000                 -13         3.472961   \n",
       "4           -0.997070       -2.331543                   0         0.000000   \n",
       "...               ...             ...                 ...              ...   \n",
       "17198        2.148438       -3.114746                   0         0.000000   \n",
       "17199        1.132324       -1.164551                   0         0.000000   \n",
       "17200        0.979004       -0.215485                   0         0.000000   \n",
       "17201        0.000000        0.000000                  13         2.643000   \n",
       "17202        0.357971       -2.687500                   0         0.000000   \n",
       "\n",
       "       JPsiLepton_1_eta  JPsiLepton_1_phi  JPsiLepton_2_pdgId  \\\n",
       "0             -1.598145         -1.058838                  13   \n",
       "1             -0.248352         -0.634644                  13   \n",
       "2              1.892578          0.826538                  13   \n",
       "3             -0.940796          2.542480                  13   \n",
       "4              0.000000          0.000000                   0   \n",
       "...                 ...               ...                 ...   \n",
       "17198          0.000000          0.000000                   0   \n",
       "17199          0.000000          0.000000                   0   \n",
       "17200          0.000000          0.000000                   0   \n",
       "17201         -1.353516         -0.729248                 -13   \n",
       "17202          0.000000          0.000000                   0   \n",
       "\n",
       "       JPsiLepton_2_pt  JPsiLepton_2_eta  JPsiLepton_2_phi   JPsi_pt  \\\n",
       "0             3.038785         -1.328613         -0.338562  3.100114   \n",
       "1             4.127180         -0.565430         -1.466064  3.099948   \n",
       "2             4.715885          1.081543          1.000977  3.099559   \n",
       "3             2.102580         -0.071518          1.816650  3.099885   \n",
       "4             0.000000          0.000000          0.000000  0.000000   \n",
       "...                ...               ...               ...       ...   \n",
       "17198         0.000000          0.000000          0.000000  0.000000   \n",
       "17199         0.000000          0.000000          0.000000  0.000000   \n",
       "17200         0.000000          0.000000          0.000000  0.000000   \n",
       "17201         2.963679         -0.396301         -1.215088  3.098841   \n",
       "17202         0.000000          0.000000          0.000000  0.000000   \n",
       "\n",
       "       JPsi_eta  JPsi_phi  JPsi_mass  \n",
       "0      3.100114  3.100114   3.100114  \n",
       "1      3.099948  3.099948   3.099948  \n",
       "2      3.099559  3.099559   3.099559  \n",
       "3      3.099885  3.099885   3.099885  \n",
       "4      0.000000  0.000000   0.000000  \n",
       "...         ...       ...        ...  \n",
       "17198  0.000000  0.000000   0.000000  \n",
       "17199  0.000000  0.000000   0.000000  \n",
       "17200  0.000000  0.000000   0.000000  \n",
       "17201  3.098841  3.098841   3.098841  \n",
       "17202  0.000000  0.000000   0.000000  \n",
       "\n",
       "[17203 rows x 19 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa1a2902",
   "metadata": {},
   "source": [
    "We make a simple mass distribution of the $J/\\Psi$ candidates mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "38ef32ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from helpers import *\n",
    "\n",
    "dfleading=df[['JPsiLepton_1_pt','JPsiLepton_1_eta']].rename(\n",
    "    columns={'JPsiLepton_1_pt':'JPsiLepton_pt','JPsiLepton_1_eta':'JPsiLepton_eta'}\n",
    ")\n",
    "dfleading['JPsiLepton_abseta']=np.abs(dfleading['JPsiLepton_eta'])\n",
    "\n",
    "dfsubleading=df[['JPsiLepton_2_pt','JPsiLepton_2_eta']].rename(\n",
    "    columns={'JPsiLepton_2_pt':'JPsiLepton_pt','JPsiLepton_2_eta':'JPsiLepton_eta'}\n",
    ")control \n",
    "dfsubleading['JPsiLepton_abseta']=np.abs(dfsubleading['JPsiLepton_eta'])\n",
    "\n",
    "\n",
    "dflist=[(dfleading,None,'Leading'),(dfsubleading,None,'Sub-leading')]\n",
    "for v,vtitle,bins in [\n",
    "    ('JPsiLepton_pt', rf'Lepton $p_{{T}}$ [GeV]',np.linspace(0,10,100)),\n",
    "    ('JPsiLepton_abseta', rf'Lepton pseudo-rapidity',np.linspace(0,2.5,100)),\n",
    "        \n",
    "]:\n",
    "    inspectDistribution(dflist,v,vtitle,bins)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f30b932",
   "metadata": {},
   "source": [
    "NanoAODs available so far:\n",
    "\n",
    "* ggpsi1g : /eos/cms/store/cmst3/group/top/ttbarjpsi/ggpsi1g/\n",
    "* ttbar : /eos/cms/store/cmst3/group/top/ttbarjpsi/TTTo2J1L1Nu_CP5_13p6TeV_powheg-pythia8/ (several files)\n",
    "* x3s18ttbar_HO : /eos/cms/store/cmst3/group/top/ttbarjpsi/gg_ccx3s18ttbar_HO/gg_ccx3s18ttbar_HO_NANOGEN.root"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3de338f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming you have a DataFrame called 'df' with a column named 'column_name'\n",
    "# Replace 'df' and 'column_name' with the actual DataFrame and column name\n",
    "\n",
    "# Plot a histogram\n",
    "plt.hist(df['JPsi_mass'], bins=10)  # Adjust the number of bins as needed\n",
    "plt.xlabel('Values')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Column')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74427742",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming you have a DataFrame called 'df' with a column named 'column_name'\n",
    "# Replace 'df' and 'column_name' with the actual DataFrame and column name\n",
    "\n",
    "# Plot a histogram\n",
    "plt.hist(df['JPsi_mass'], bins=1000)  # Adjust the number of bins as needed\n",
    "plt.xlabel('JPsi Mass')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Column')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0de16ea5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  },
  "sparkconnect": {
   "bundled_options": [
    "LongRunningAnalysis",
    "Spark3Shuffle",
    "MemoryIntensive"
   ],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
